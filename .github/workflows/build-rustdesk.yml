name: Build RustDesk for Windows

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      - name: Setup VCPKG
        run: |
          git clone https://github.com/microsoft/vcpkg
          ./vcpkg/bootstrap-vcpkg.bat -disableMetrics
          ./vcpkg/vcpkg install opus:x64-windows-static
          echo "VCPKG_ROOT=$env:GITHUB_WORKSPACE\vcpkg" >> $env:GITHUB_ENV
          echo "$env:GITHUB_WORKSPACE\vcpkg" >> $env:GITHUB_PATH
    
      # 1. 检查代码
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: rustdesk/rustdesk
          path: src
          submodules: recursive

      # 2. 设置Rust环境
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc
          override: true
          components: rust-src, llvm-tools-preview

      # 3. 改进的依赖安装
      - name: Install dependencies
        run: |
          # 强制重新安装llvm并刷新环境
          choco uninstall -y llvm
          choco install -y llvm --force
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv

          # 其他依赖
          choco install -y windows-sdk-10.0 strawberryperl nasm
          Write-Host "::group::Environment Variables"
          Get-ChildItem Env:
          Write-Host "::endgroup::"

      # 4. 构建客户端（跳过硬件加速）
      - name: Build RustDesk Client
        run: |
           cd src
           cargo build --release --features "hwcodec"  # 移除了不存在的vcpkg feature
        env:
           VCPKG_ROOT: ${{ env.VCPKG_ROOT }}
           RUST_BACKTRACE: full
           # 显式链接库
           RUSTFLAGS: "-C link-arg=/LIBPATH:$env:VCPKG_ROOT/installed/x64-windows-static/lib"

      # 5. 构建服务器
      - name: Build RustDesk Server
        run: |
          cd src/hbbs
          cargo build --release
          cd ../hbbr
          cargo build --release

      # 6. 打包产物
      - name: Prepare artifacts
        run: |
          mkdir release
          cp src/target/release/rustdesk.exe release/
          cp src/hbbs/target/release/hbbs.exe release/
          cp src/hbbr/target/release/hbbr.exe release/
          Get-Date -Format "yyyy-MM-dd HH:mm:ss" | Out-File -FilePath release/build_time.txt -Encoding utf8

      # 7. 上传产物
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-${{ github.sha }}
          path: release/*
          retention-days: 5

      # 8. 发布到GitHub Release（仅tag触发时）
      - name: Upload to GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/rustdesk.exe
            release/hbbs.exe
            release/hbbr.exe
          tag_name: ${{ github.ref_name }}
          name: RustDesk ${{ github.ref_name }}
          body: |
            Windows 版本构建于 ${{ steps.prepare.outputs.build_time }}
            - 客户端: rustdesk.exe
            - 信令服务器: hbbs.exe  
            - 中继服务器: hbbr.exe
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
