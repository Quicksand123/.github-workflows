name: Build RustDesk for Windows

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  release:
    types: [ created ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      # 1. 拉取官方源码（关键修改）
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: rustdesk/rustdesk
          path: src  # 统一使用src目录
          submodules: recursive

      # 2. 验证目录结构（调试用）
      - name: Debug structure
        run: ls -R src  # 确认存在src/hbbs和src/hbbr

      # 3. 设置Rust环境
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc
          override: true

      # 4. 安装依赖
      - name: Install dependencies
        run: |
          choco install -y windows-sdk-10.0 strawberryperl nasm llvm
          choco install -y intel-media-sdk
          choco install -y nvidia-video-codec-sdk --version 12.1.14
          echo "INTEL_MEDIA_SDK_ROOT=C:\Program Files (x86)\Intel\Media SDK" >> $env:GITHUB_ENV
          echo "NVCODEC_ROOT=C:\Program Files\NVIDIA Corporation\Video Codec SDK" >> $env:GITHUB_ENV

      - name: Build RustDesk Client
        run: |
          cd src
          cargo build --release --features "hwcodec" --config "build.rustflags = [\"-C\", \"target-cpu=native\"]"
        env:
          RUST_BACKTRACE: full

      # 5. 构建客户端（修正feature）
      - name: Build RustDesk Client
        run: |
          cd src
          cargo build --release --features "hwcodec"  # 使用官方推荐feature

      # 6. 构建服务器（路径修正）
      - name: Build RustDesk Server
        run: |
          cd src/hbbs  # 修正路径
          cargo build --release
          cd ../hbbr
          cargo build --release

      # 7. 打包产物（路径修正）
      - name: Prepare artifacts
        run: |
          mkdir release
          cp src/target/release/rustdesk.exe release/
          cp src/hbbs/target/release/hbbs.exe release/
          cp src/hbbr/target/release/hbbr.exe release/
          echo "Version: ${{ github.ref_name }}" > release/version.txt
          date >> release/version.txt

      # 后续步骤保持不变...
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-${{ github.sha }}
          path: release/*
      
      - name: Upload to GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          tag_name: ${{ github.ref_name }}
          name: RustDesk ${{ github.ref_name }}
          body: |
            RustDesk Windows 版本 ${{ github.ref_name }}
            包含客户端和服务器组件
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
